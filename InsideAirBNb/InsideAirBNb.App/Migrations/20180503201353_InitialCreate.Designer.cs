// <auto-generated />
using System;
using InsideAirBNB.App.Data;
using InsideAirBNB.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

namespace InsideAirBNB.Data.Migrations
{
    [DbContext(typeof(InsideAirBNBContext))]
    [Migration("20180503201353_InitialCreate")]
    partial class InitialCreate
    {
        protected void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-preview2-30571")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("InsideAirBNB.Models.Calendar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Available");

                    b.Property<DateTime>("Date");

                    b.Property<int>("ListingId");

                    b.Property<string>("Price");

                    b.HasKey("Id");

                    b.HasIndex("ListingId");

                    b.ToTable("Calendars");
                });

            modelBuilder.Entity("InsideAirBNB.Models.Listing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Access");

                    b.Property<int?>("Accommodates");

                    b.Property<string>("Amenities");

                    b.Property<int?>("Availability30");

                    b.Property<int?>("Availability365");

                    b.Property<int?>("Availability60");

                    b.Property<int?>("Availability90");

                    b.Property<double?>("Bathrooms");

                    b.Property<string>("BedType");

                    b.Property<int?>("Bedrooms");

                    b.Property<int?>("Beds");

                    b.Property<int>("CalculatedHostListingsCount");

                    b.Property<DateTime?>("CalendarLastScraped");

                    b.Property<string>("CalendarUpdated");

                    b.Property<string>("CancellationPolicy");

                    b.Property<string>("City");

                    b.Property<string>("CleaningFee");

                    b.Property<string>("Country");

                    b.Property<string>("CountryCode");

                    b.Property<string>("Description");

                    b.Property<string>("ExperiencesOffered");

                    b.Property<string>("ExtraPeople");

                    b.Property<DateTime?>("FirstReview");

                    b.Property<int?>("GuestsIncluded");

                    b.Property<string>("HasAvailability");

                    b.Property<string>("HostAbout");

                    b.Property<string>("HostAcceptanceRate");

                    b.Property<string>("HostHasProfilePic");

                    b.Property<int>("HostId");

                    b.Property<string>("HostIdentityVerified");

                    b.Property<string>("HostIsSuperhost");

                    b.Property<int?>("HostListingsCount");

                    b.Property<string>("HostLocation");

                    b.Property<string>("HostName");

                    b.Property<string>("HostNeighbourhood");

                    b.Property<string>("HostPictureUrl");

                    b.Property<string>("HostResponseRate");

                    b.Property<string>("HostResponseTime");

                    b.Property<DateTime?>("HostSince");

                    b.Property<string>("HostThumbnailUrl");

                    b.Property<int?>("HostTotalListingsCount");

                    b.Property<string>("HostUrl");

                    b.Property<string>("HostVerifications");

                    b.Property<string>("HouseRules");

                    b.Property<string>("InstantBookable");

                    b.Property<string>("Interaction");

                    b.Property<string>("IsBusinessTravelReady");

                    b.Property<string>("IsLocationExact");

                    b.Property<string>("JurisdictionNames");

                    b.Property<DateTime?>("LastReview");

                    b.Property<DateTime>("LastScraped");

                    b.Property<double?>("Latitude");

                    b.Property<string>("License");

                    b.Property<string>("ListingUrl");

                    b.Property<double?>("Longitude");

                    b.Property<string>("Market");

                    b.Property<int?>("MaximumNights");

                    b.Property<string>("MediumUrl");

                    b.Property<int?>("MinimumNights");

                    b.Property<string>("MonthlyPrice");

                    b.Property<string>("Name");

                    b.Property<string>("NeighborhoodOverview");

                    b.Property<string>("Neighbourhood");

                    b.Property<string>("NeighbourhoodCleansed");

                    b.Property<string>("NeighbourhoodGroupCleansed");

                    b.Property<string>("Notes");

                    b.Property<int?>("NumberOfReviews");

                    b.Property<string>("PictureUrl");

                    b.Property<string>("Price");

                    b.Property<string>("PropertyType");

                    b.Property<string>("RequireGuestPhoneVerification");

                    b.Property<string>("RequireGuestProfilePicture");

                    b.Property<string>("RequiresLicense");

                    b.Property<int?>("ReviewScoresAccuracy");

                    b.Property<int?>("ReviewScoresCheckin");

                    b.Property<int?>("ReviewScoresCleanliness");

                    b.Property<int?>("ReviewScoresCommunication");

                    b.Property<int?>("ReviewScoresLocation");

                    b.Property<int?>("ReviewScoresRating");

                    b.Property<int?>("ReviewScoresValue");

                    b.Property<double?>("ReviewsPerMonth");

                    b.Property<string>("RoomType");

                    b.Property<double>("ScrapeId");

                    b.Property<string>("SecurityDeposit");

                    b.Property<string>("SmartLocation");

                    b.Property<string>("Space");

                    b.Property<string>("SquareFeet");

                    b.Property<string>("State");

                    b.Property<string>("Street");

                    b.Property<string>("Summary");

                    b.Property<string>("ThumbnailUrl");

                    b.Property<string>("Transit");

                    b.Property<string>("WeeklyPrice");

                    b.Property<string>("XlPictureUrl");

                    b.Property<string>("Zipcode");

                    b.HasKey("Id");

                    b.ToTable("Listings");
                });

            modelBuilder.Entity("InsideAirBNB.Models.Neighbourhood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("NeighbourhoodGroup");

                    b.HasKey("Id");

                    b.ToTable("Neighbourhoods");
                });

            modelBuilder.Entity("InsideAirBNB.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comments");

                    b.Property<DateTime>("Date");

                    b.Property<int>("ListingId");

                    b.Property<int>("ReviewerId");

                    b.Property<string>("ReviewerName");

                    b.HasKey("Id");

                    b.HasIndex("ListingId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("InsideAirBNB.Models.SummaryListing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Availability365");

                    b.Property<int?>("CalculatedHostListingsCount");

                    b.Property<int>("HostId");

                    b.Property<string>("HostName");

                    b.Property<DateTime?>("LastReview");

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<int?>("MinimumNights");

                    b.Property<string>("Name");

                    b.Property<string>("Neighbourhood");

                    b.Property<string>("NeighbourhoodGroup");

                    b.Property<int?>("NumberOfReviews");

                    b.Property<int?>("Price");

                    b.Property<double?>("ReviewsPerMonth");

                    b.Property<string>("RoomType");

                    b.HasKey("Id");

                    b.ToTable("SummaryListings");
                });

            modelBuilder.Entity("InsideAirBNB.Models.SummaryReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<int>("ListingId");

                    b.HasKey("Id");

                    b.ToTable("SummaryReviews");
                });

            modelBuilder.Entity("InsideAirBNB.Models.Calendar", b =>
                {
                    b.HasOne("InsideAirBNB.Models.Listing", "Listing")
                        .WithMany("Calendar")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("InsideAirBNB.Models.Review", b =>
                {
                    b.HasOne("InsideAirBNB.Models.Listing", "Listing")
                        .WithMany("Reviews")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
